{"version":3,"sources":["app/reducers/walletSlice.js","utils/contract.js","constants/config.js","components/Headers/ConnectButton.js","components/Headers/ConnectKeplrButton.js","components/Headers/Header.js","pages/MainPage.js","layouts/MainLayout.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["walletSlice","createSlice","name","initialState","connected","connection","address","reducers","setConnected","state","action","payload","setConnection","disconnected","connectState","wallet","actions","web3","Web3","providers","HttpProvider","getEthBalance","a","eth","getBalance","balance","ConnectButton","useState","setWallet","setBalance","useSelector","dispatch","useDispatch","connectWalletHandler","window","ethereum","alert","on","accounts","toString","disconnectWalletHandler","networkId","request","method","console","log","useCallback","type","className","toFixed","substring","onClick","ConnectKeplrButton","connectKeplrWalletHandler","keplr","chainId","enable","offlineSigner","getOfflineSigner","getAccounts","Header","style","marginTop","MainPage","MainLayout","path","exact","component","from","to","App","store","configureStore","reducer","walletReducer","middleware","getDefaultMiddleware","serializableCheck","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1f6887f.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  connected: false,\r\n  connection: null,\r\n  address: null,\r\n};\r\n\r\nexport const walletSlice = createSlice({\r\n  name: 'wallet',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setConnected: (state, action) => {\r\n      state.connected = true;\r\n      state.address = action.payload;\r\n    },\r\n    setConnection: (state, action) => {\r\n      state.connection = action.payload;\r\n    },\r\n    disconnected: (state) => {\r\n      state.connected = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const connectState = (state) => state.wallet.connected;\r\n\r\nexport const connectedAddress = (state) => state.wallet.address;\r\n\r\nexport const getConnection = (state) => state.wallet.connection;\r\n\r\nexport const { setConnected, setConnection, disconnected } = walletSlice.actions;\r\n\r\nexport default walletSlice.reducer;\r\n","import Web3 from 'web3';\r\nimport { rpcUrl } from \"../constants/config\";\r\n\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(rpcUrl));\r\n\r\nexport const getEthBalance = async (address) => {\r\n    let balance =await web3.eth.getBalance(address);\r\n    return balance;\r\n}\r\n\r\n","export const rpcUrl = \"https://nd-936-032-631.p2pify.com/2a71e6ff68ace15d31eaf3947d81c4b4\";\r\n// export const rpcUrl = \"https://nd-073-459-754.p2pify.com/731dc6c840feafa9afa521021c46f09c\";","import { useState, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    setConnected,\r\n    connectState,\r\n    disconnected,\r\n} from '../../app/reducers/walletSlice';\r\nimport { getEthBalance } from 'utils/contract';\r\n\r\n\r\nfunction ConnectButton() {\r\n    const [wallet, setWallet] = useState(\"0x0\");\r\n    const [balance, setBalance] = useState(0);\r\n\r\n    const connected = useSelector(connectState);\r\n    const dispatch = useDispatch();\r\n\r\n    const connectWalletHandler = async () => {\r\n        const { ethereum } = window;\r\n        if (!ethereum) {\r\n            alert(\"Install MetaMask\");\r\n            return;\r\n        }\r\n        \r\n        ethereum.on('accountsChanged', async function (accounts) {\r\n            let wallet = accounts[0];\r\n            if (wallet) {\r\n                let balance = await getEthBalance(wallet);\r\n                setBalance(balance); //set balance of token to balance variable\r\n                setWallet(wallet); // set connected wallet address\r\n                dispatch(setConnected(wallet.toString())) // update connected, address of store\r\n            } else { \r\n                // if disconnect account on metamask, disconnect account(set connected to false of store)\r\n                await disconnectWalletHandler(); \r\n            }\r\n        });\r\n        ethereum.on('networkChanged', async function (networkId) {\r\n            // if connected chain is not avalanche fuji test net, disconnect wallet\r\n            if(networkId !== '0x1') {\r\n                disconnectWalletHandler();\r\n            }\r\n        })\r\n        \r\n        if (wallet!==\"0x0\") {\r\n            let balance = await getEthBalance(wallet);\r\n            setBalance(balance); //set balance of token to balance variable\r\n        }\r\n\r\n        try {\r\n            // request connect one account of metamask to current website\r\n            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n            // get connected chain id\r\n            const chainId = await window.ethereum.request({ method: 'eth_chainId'});\r\n\r\n            if (chainId===\"0x1\") {\r\n                let wallet = accounts[0];\r\n                let balance = await getEthBalance(wallet);\r\n                setBalance(balance);\r\n                setWallet(wallet);\r\n                dispatch(setConnected(wallet.toString()))\r\n            }\r\n            \r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const disconnectWalletHandler =useCallback(() => {\r\n        setWallet('0x0');\r\n        dispatch(disconnected()); // update connected of store to false\r\n    }, [dispatch]);\r\n\r\n    const connectWalletButton = () => {\r\n        return (\r\n            <button onClick={connectWalletHandler} type=\"button\" className=\"btn btn-dark\">\r\n                Connect MetaMask\r\n            </button>\r\n        )\r\n    }\r\n\r\n    const disconnectWalletButton = () => {\r\n        // this is displayed after wallet is connected to site\r\n        return (\r\n            <div>\r\n                <button type=\"button\" className=\"mr-2 btn btn-dark\">\r\n                    {(balance/1000000000000000000).toFixed(3)}\r\n                </button>\r\n                <button type=\"button\" className=\"mr-2 btn btn-dark\">\r\n                    {wallet.substring(0, 6)}...{wallet.substring(38, 42)} \r\n                </button>\r\n                <button onClick={disconnectWalletHandler} type=\"button\" className=\"btn btn-dark\">\r\n                    Disconnect Wallet\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!connected ? connectWalletButton() : disconnectWalletButton()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConnectButton;","import { useState, useCallback } from 'react';\r\nimport {\r\n    // SigningCosmosClient,\r\n    // LcdClient, setupAuthExtension\r\n  } from \"@cosmjs/launchpad\";\r\n\r\n\r\nfunction ConnectKeplrButton() {\r\n    const [wallet, setWallet] = useState(\"0x0\");\r\n    const [balance, setBalance] = useState(0);\r\n    const [connected, setConnected] = useState(false);\r\n\r\n\r\n    // const checkWalletIsInstalled = () => {\r\n    //     if (!window.keplr) {\r\n    //         alert(\"Please install keplr extension\");\r\n    //         return;\r\n    //     }\r\n    // }\r\n\r\n    \r\n    const disconnectWalletHandler = () => {\r\n        setWallet('0x0');\r\n        setConnected(false);\r\n    }\r\n\r\n    const connectWalletButton = () => {\r\n        return (\r\n            <>\r\n                <button onClick={connectKeplrWalletHandler} type=\"button\" className=\"btn btn-dark\">\r\n                    Connect Keplr Wallet\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const disconnectWalletButton = () => {\r\n        // this is displayed after wallet is connected to site\r\n        return (\r\n            <div>\r\n                <button type=\"button\" className=\"mr-2 btn btn-dark\">\r\n                    {(balance/1000000000000000000).toFixed(2)}\r\n                </button>\r\n                <button type=\"button\" className=\"mr-2 btn btn-dark\">\r\n                    {wallet}\r\n                </button>\r\n                <button onClick={disconnectWalletHandler} type=\"button\" className=\"btn btn-dark\">\r\n                    Disconnect Keplr Wallet\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const connectKeplrWalletHandler = useCallback(async()=> {\r\n        if (!window.keplr) {\r\n            alert(\"Please install keplr extension\");\r\n        } else {\r\n            const chainId = \"cosmoshub-4\";\r\n    \r\n            // Enabling before using the Keplr is recommended.\r\n            // This method will ask the user whether to allow access if they haven't visited this website.\r\n            // Also, it will request that the user unlock the wallet if the wallet is locked.\r\n            await window.keplr.enable(chainId);\r\n        \r\n            const offlineSigner = window.keplr.getOfflineSigner(chainId);\r\n        \r\n            // You can get the address/public keys by `getAccounts` method.\r\n            // It can return the array of address/public key.\r\n            // But, currently, Keplr extension manages only one address/public key pair.\r\n            // XXX: This line is needed to set the sender address for SigningCosmosClient.\r\n            const accounts = await offlineSigner.getAccounts();\r\n            setWallet(accounts[0]['address'].toString());\r\n            setConnected(true);\r\n\r\n            const [{ address }] = await offlineSigner.getAccounts();\r\n\r\n            console.log(address);\r\n        \r\n            // Initialize the gaia api with the offline signer that is injected by Keplr extension.\r\n            // const cosmJS = new SigningCosmosClient(\r\n            //     \"https://lcd-cosmoshub.keplr.app\",\r\n            //     address,\r\n            //     offlineSigner,\r\n            // );\r\n\r\n            // const client = LcdClient.withExtensions(\"https://lcd-cosmoshub.keplr.app\", setupAuthExtension);\r\n            // const { account_number, sequence } = (await client.auth.account(address))\r\n            // .result.value;\r\n\r\n\r\n            // check our balance\r\n            // const { value} = (await cosmJS.getAccount(address)).result;\r\n            // console.log(\"Account:\", account_number, sequence);\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {!connected ? connectWalletButton() : disconnectWalletButton()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConnectKeplrButton;","import React from \"react\";\r\n// import WalletButton from \"components/ConnectWalletButton\";\r\nimport ConnectButton from \"./ConnectButton\";\r\nimport ConnectKeplrButton from \"./ConnectKeplrButton\";\r\n\r\nexport default function Header() {\r\n  return (\r\n        <>\r\n            {/* Header */}\r\n            <div className=\"row\">\r\n                \r\n                <div className=\"col-12\">\r\n                    <div className=\"float-right\">\r\n                        <ConnectButton />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\" style={{marginTop: \"10px\"}}>\r\n                \r\n                <div className=\"col-12\">\r\n                    <div className=\"float-right\">\r\n                        <ConnectKeplrButton />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport default function MainPage() {\r\n\r\n    return (\r\n        <>\r\n            <div></div>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Header from \"components/Headers/Header\";\r\nimport MainPage from \"pages/MainPage\";\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\n\r\nexport default function MainLayout() {\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        {/* <AdminNavbar /> */}\r\n        {/* Header */}\r\n        <Header />\r\n        <div>\r\n          <Switch>\r\n            <Route path=\"/main/\" exact component={MainPage} />\r\n            <Redirect from=\"/\" to=\"/main/\" />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport MainLayout from 'layouts/MainLayout.js';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n        {/* add routes with layouts */}\r\n        <Route path=\"/\" component={MainLayout}/>\r\n        <Redirect from=\"*\" to=\"/\"/>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport walletReducer from './reducers/walletSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    wallet: walletReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n    serializableCheck: false\r\n  }),\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import App from \"./components/test\";\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"assets/styles/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <Router> \r\n                <App />\r\n            </Router>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}